#!crnn/rnn.py
# kate: syntax python;
# based on ctc-fast-bw.fromscratch.sbt600.fprior.lexnorm.filterallos.nosilloop.tdp0.5l.pretrain.grad_noise03.nadam.lr05e_3.nbm6.nbrl.grad_clip_inf.config

import os
from subprocess import check_output
import numpy

# task
task = "train"
device = "gpu"
multiprocessing = True
update_on_device = True

# data
num_inputs = 40  # Gammatone 40-dim
num_outputs = 9001 # 4501
EpochSplit = 6

_cf_cache = {}

def cf(filename):
	"""Cache manager"""
	if filename in _cf_cache:
		return _cf_cache[filename]
	if int(os.environ.get("CF_NOT_FOR_LOCAL", "1")) and check_output(["hostname"]).strip() in ["cluster-cn-211", "sulfid"]:
		print("use local file: %s" % filename)
		return filename  # for debugging
	cached_fn = check_output(["cf", filename]).strip()
	assert os.path.exists(cached_fn)
	_cf_cache[filename] = cached_fn
	return cached_fn

commonfiles = {
	"corpus": "/u/tuske/work/ASR/switchboard/corpus/xml/train.corpus.gz",
	"features": "/u/tuske/work/ASR/switchboard/feature.extraction/gt40_40/data/gt.train.bundle",
	"lexicon": "/u/tuske/work/ASR/switchboard/corpus/train.lex.v1_0_3.ci.gz",
	"alignment": "dependencies/tuske__2016_01_28__align.combined.train",
	"cart": "/u/tuske/work/ASR/switchboard/initalign/data/%s" % {9001: "cart-9000"}[num_outputs]
}

def get_sprint_dataset(data):
	assert data in ["train", "cv"]
	epochSplit = {"train": EpochSplit, "cv": 1}

	# see /u/tuske/work/ASR/switchboard/corpus/readme
	# and zoltans mail https://mail.google.com/mail/u/0/#inbox/152891802cbb2b40
	files = {
		"config": "config/training.config",
		#"segments": "dependencies/seg_%s" % {"train":"train_align_compare10", "cv":"train_align_compare10"}[data]
		"segments": "dependencies/seg_%s" % {"train":"train", "cv":"cv_head3000"}[data]
	}
	files.update(commonfiles)
	for k, v in sorted(files.items()):
		assert os.path.exists(v), "%s %r does not exist" % (k, v)
	estimated_num_seqs = {"train": 227047, "cv": 3000}  # wc -l segment-file

	# features: /u/tuske/work/ASR/switchboard/feature.extraction/gt40_40/data/gt.train.*
	args = [
	"--config=" + files["config"],
	lambda: "--*.corpus.file=" + cf(files["corpus"]),
	lambda: "--*.corpus.segments.file=" + cf(files["segments"]),
	"--*.corpus.segment-order-shuffle=true",
	"--*.segment-order-sort-by-time-length=true",
	"--*.segment-order-sort-by-time-length-chunk-size=%i" % {"train": (EpochSplit or 1) * 100, "cv": -1}[data],
	"--*.state-tying.type=cart",
	lambda: "--*.state-tying.file=" + cf(files["cart"]),
	"--*.trainer-output-dimension=%i" % num_outputs,
	lambda: "--*.lexicon.file=" + cf(files["lexicon"]),
	lambda: "--*.alignment-cache-path=" + cf(files["alignment"]),
	lambda: "--*.feature-cache-path=" + cf(files["features"]),
	#"--*.mean-normalization.file=dependencies/setup-base/step254-hybrid-mlp-ibm-cmllr/mlp.4/train_mlp/normalize_layer1/mean",
	#"--*.variance-normalization.file=dependencies/setup-base/step254-hybrid-mlp-ibm-cmllr/mlp.4/train_mlp/normalize_layer1/std",
	"--*.log-channel.file=log/crnn.sprint.dataset-%s.log" % data,
	"--*.window-size=1"
	]
	return {
	"class": "ExternSprintDataset", "sprintTrainerExecPath": "sprint-executables/nn-trainer",
	"sprintConfigStr": args,
	"partitionEpoch": epochSplit[data],
	"estimated_num_seqs": estimated_num_seqs[data] // (epochSplit[data] or 1)}

def parse_tdp_config(s):
	s = s.replace(" ", "").replace("\t", "")
	return ["--*.tdp.%s" % l.strip() for l in s.splitlines() if l.strip()]

def get_sprint_error_signal_proc_args():
	files = commonfiles.copy()
	for k, v in sorted(files.items()):
		assert os.path.exists(v), "%s %r does not exist" % (k, v)
	return [
		"--config=config/ctc.train.config",
		"--action=python-control",
		"--python-control-loop-type=python-control-loop",
		"--*.python-segment-order=false",
		"--*.extract-features=false",  # we don't need features
		lambda: "--*.corpus.file=" + cf(files["corpus"]),
		"--*.state-tying.type=cart",
		lambda: "--*.state-tying.file=" + cf(files["cart"]),
		lambda: "--*.lexicon.file=" + cf(files["lexicon"]),
		"--*.feature-cache-path=should-not-be-needed",
		"--*.alignment-cache-path=should-not-be-needed",
		"--*.prior-file=dependencies/prior-fixed-f32.xml",
		"--*.lexicon.normalize-pronunciation=true",
		"--*.transducer-builder-filter-out-invalid-allophones=true",
		"--*.fix-allophone-context-at-word-boundaries=true",
		"--*.allow-for-silence-repetitions=false",
		"--*.normalize-lemma-sequence-scores=true",
		"--*.number-of-classes=%i" % num_outputs
	] + parse_tdp_config("""
*.loop                  = %(loop)f
*.forward               = %(forward)f
*.skip                  = infinity
*.exit                  = %(forward)f
entry-m1.forward        = 0
entry-m2.forward        = 0
entry-m1.loop           = infinity
entry-m2.loop           = infinity
silence.loop            = %(sloop)f
silence.forward         = %(sforward)f
silence.skip            = infinity
silence.exit            = %(sforward)f
""" % {
"loop": -numpy.log(0.65), "forward": -numpy.log(0.35),
#"sloop": -numpy.log(0.97), "sforward": -numpy.log(0.03)
"sloop": -numpy.log(0.65), "sforward": -numpy.log(0.35)
#"loop": 0, "forward": 0, "sloop": 0, "sforward": 0
})

sprint_loss_opts = {
	"sprintExecPath": "sprint-executables/nn-trainer",
	"sprintConfigStr": "config:get_sprint_error_signal_proc_args",
	"minPythonControlVersion": 4,
	"sprintControlConfig": {},
	"numInstances": 3  # For debugging, better set this to 1.
}

train = get_sprint_dataset("train")
dev = get_sprint_dataset("cv")
cache_size = "0"
window = 1

# network
# (also defined by num_inputs & num_outputs)
from Pretrain import WrapEpochValue
num_inputs = 40  # Gammatone 40-dim
num_outputs = 9001 # 4501
network = {
"input_window": {"class": "window", "window": 17, "trainable": False},
"ff0": {"class": "hidden", "activation": "relu", "n_out": 2000, "L2": 0.01, "from": ["input_window"]},
"ff1": {"class": "hidden", "activation": "relu", "n_out": 2000, "L2": 0.01, "from": ["ff0"]},
"ff2": {"class": "hidden", "activation": "relu", "n_out": 2000, "L2": 0.01, "from": ["ff1"]},
"ff3": {"class": "hidden", "activation": "relu", "n_out": 2000, "L2": 0.01, "from": ["ff2"]},
"ff4": {"class": "hidden", "activation": "relu", "n_out": 2000, "L2": 0.01, "from": ["ff3"]},
"ff5": {"class": "hidden", "activation": "relu", "n_out": 2000, "L2": 0.01, "from": ["ff4"]},
"ff6": {"class": "hidden", "activation": "relu", "n_out": 2000, "L2": 0.01, "from": ["ff5"]},
"ff7": {"class": "hidden", "activation": "relu", "n_out": 2000, "L2": 0.01, "from": ["ff6"]},
"ff8": {"class": "hidden", "activation": "relu", "n_out": 2000, "L2": 0.01, "from": ["ff7"]},
"output": {"class" : "softmax", "loss" : "fast_bw", "from" : ["ff8"],
	"prior_scale": 0.7,
	"compute_priors": True,
	"compute_priors_exp_average": 0.001,
	#"bw_norm_class_avg": True,
	#"gamma": WrapEpochValue(lambda epoch: min(1, 0.5 * epoch)),
	#"am_scale": WrapEpochValue(lambda epoch: min(1, 0.5 * epoch)),
	"sprint_opts": sprint_loss_opts}
}

# trainer
batching = "random"
batch_size = 5000
max_seqs = 40
max_seq_length = batch_size
#chunking = ""  # no chunking
truncation = -1
num_epochs = 40
model = "net-model/network"
pretrain = "default"
pretrain_construction_algo = "from_input"
gradient_clip = 0
nadam = True
gradient_noise = 0.3
learning_rate = 0.0005
learning_rate_control = "newbob_multi_epoch"
learning_rate_control_relative_error_relative_lr = True
newbob_multi_num_epochs = 6
newbob_multi_update_interval = 1
learning_rate_file = "newbob.data"

# log
#log = "| /u/zeyer/dotfiles/system-tools/bin/mt-cat.py >> log/crnn.seq-train.%s.log" % task
log = "log/crnn.seq-train.%s.log" % task
log_verbosity = 5


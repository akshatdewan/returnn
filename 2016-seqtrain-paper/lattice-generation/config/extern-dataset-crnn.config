include mfcc.lda.sat.config
include network.config

# ---------------------------------------------------------------------------
[*]
job-name                            = train
use-cuda                            = false # This is for Sprint only.
seed                                = 1  # Default.
allophone-file                      = deps/allophones
log-channel.file                    = log/sprint-train

# ---------------------------------------------------------------------------
[*]
action                              = supervised-training
trainer                             = python-trainer
training-criterion                  = cross-entropy
estimator                           = steepest-descent

[*.state-tying]
type                            = decision-tree
file                            = deps/cart.tree.xml.gz
dump-state-tying.channel        = nil


[*.mixture-set]
file                            = deps/split-8.sat.mix
scale                           = $(mixture-set-scale)
normalize-mixture-weights       = false

feature-scorer-type             = nn-trainer-feature-scorer  # Will use a trainer to get posteriors.
#*.buffer-size                   = 32
trainer                         = python-trainer

prior-file                      = deps/prior-f32.xml #check which prior you use
priori-scale                    = 0.7

# For RNNs, we need full unshuffled segments.
buffer-type                         = utterance
buffer-size                         = 200000 # the maximum utterance length
shuffle                             = false # buffer must not be shuffled
corpus.segment-order-shuffle        = true

python-segment-order                = true
python-segment-order-pymod-path     = .
python-segment-order-pymod-name     = returnn.SprintInterface
use-data-source                     = false

# Python trainer config            
pymod-path                          = .
pymod-name                          = returnn.SprintInterface
natural-pairing-layer.layer-type    = softmax
use-network                         = true # for std/mean normalization
target-mode                         = target-alignment
trainer-output-dimension            = 1501

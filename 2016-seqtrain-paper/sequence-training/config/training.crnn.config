include corpus.config                                  
include hmm.config
include mfcc.lda.sat.config  
include network.config

[*.feature-extraction]
file                                                    = flow/accumulation.flow
*.alignment-cache.path                  = $(alignment-cache-path)
*.alignment-cache.read-only             = true

# ---------------------------------------------------------------------------
# accoustic model
# ---------------------------------------------------------------------------

[*.state-tying]
type                            = decision-tree
file                            = deps/cart.tree.xml.gz
dump-state-tying.channel        = nil


[*.allophones]
add-from-lexicon                = true
allophone-file                  = deps/allophones
add-all                         = false
add-from-file                   = $(allophone-file)

# ---------------------------------------------------------------------------
[*]
job-name                            = train
use-cuda                            = false # This is for Sprint only.
seed                                = 1  # Default.
log-channel.file                    = log/sprint-train

# ---------------------------------------------------------------------------
[*]
action                              = supervised-training
trainer                             = python-trainer
training-criterion                  = cross-entropy
estimator                           = steepest-descent

# For RNNs, we need full unshuffled segments.
buffer-type                         = utterance
buffer-size                         = 200000 # the maximum utterance length
shuffle                             = false # buffer must not be shuffled
corpus.segment-order-shuffle        = true

python-segment-order                = true
python-segment-order-pymod-path     = .
python-segment-order-pymod-name     = returnn.SprintInterface
use-data-source                     = false

# Python trainer config
pymod-path                          = .
pymod-name                          = returnn.SprintInterface
natural-pairing-layer.layer-type    = softmax
use-network                         = true # for std/mean normalization
target-mode                         = target-alignment
trainer-output-dimension            = 1501

<?xml version="1.0" encoding="ISO-8859-1"?>

<!--
  0. level features
-->

<network>
  <in name="samples"/>
  <out name="features"/>
  <out name="energies"/>

  <param name="id"/>
  <param name="track"/>
  <param name="start-time"/>
  <param name="end-time"/>
  <param name="speaker"/>




<!--
  Common part of Plp/Energy
-->
  <node name="window" 
	filter="signal-window" 
	type="hamming" 
	shift=".01" 
	length="0.02"/>
  <link from="network:samples" to="window"/>


  <node name="fast-fourier-transform" 
	filter="signal-real-fast-fourier-transform"
	maximum-input-size="0.02"/>
  <link from="window" to="fast-fourier-transform"/>


  <node name="amplitude-spectrum" 
	filter="signal-vector-alternating-complex-f32-amplitude"/>
  <link from="fast-fourier-transform" to="amplitude-spectrum"/>



<!-- 
  Plps
-->
  <node name="power-spectrum" 
	filter="generic-vector-f32-power"
	value="2"/>
  <link from="amplitude-spectrum" to="power-spectrum"/>

  <!-- 
	8000 Hz -> 19.708905 Bark; #filters 20 -> spacing = 0.93853
	4000 Hz -> 15.575071 Bark; #filters 15 -> spacing = 0.973442 
  -->
  <node name="filterbank" 
	filter="signal-filterbank"
	type="trapeze" 
	filter-width="3.8" 
	spacing="0.93853" 
	boundary="include-boundary" 
	warping-function="bark"/>
  <link from="power-spectrum" to="filterbank"/>


  <node name="split-filterbank" 
	filter="generic-vector-f32-split"/>
  <link from="filterbank" to="split-filterbank"/>


  <node name="reverse-split-filterbank" 
	filter="generic-vector-f32-split"
	reverse="true"/>
  <link from="filterbank" to="reverse-split-filterbank"/>


  <node name="copy-first-last-filterbank" 
	filter="generic-vector-f32-concat"/>
  <link from="split-filterbank:0" to="copy-first-last-filterbank:first"/>
  <link from="filterbank" to="copy-first-last-filterbank:middle"/>
  <link from="reverse-split-filterbank:0" to="copy-first-last-filterbank:last"/>


  <node name="equal-loudness-preemphasis" 
	filter="signal-vector-f32-continuous-transform"
	f="nest(nest(disc-to-cont, invert(bark)), equal-loudness-preemphasis)" 
	operation="multiplies"/>
  <link from="copy-first-last-filterbank" to="equal-loudness-preemphasis"/>


  <node name="intensity-loudness-law" 
	filter="generic-vector-f32-power"
	value="0.33"/>
  <link from="equal-loudness-preemphasis" to="intensity-loudness-law"/>


  <node name="autocorrelation" 
	filter="signal-cosine-transform"
	nr-outputs="17" 
	input-type="N-plus-one" 
	normalize="true"/>
  <link from="intensity-loudness-law" to="autocorrelation"/>


  <node name="autoregression" 
	filter="signal-autocorrelation-to-autoregression"/>
  <link from="autocorrelation" to="autoregression"/>				


  <node name="linear-prediction-cepstrum" 
	filter="signal-autoregression-to-cepstrum"
	nr-outputs="16"/>
  <link from="autoregression" to="linear-prediction-cepstrum"/>


  <node name="plp-normalization" 
	filter="signal-normalization"
	type="mean-and-variance"
	length="infinite" 
	right="infinite"/>
  <link from="linear-prediction-cepstrum" to="plp-normalization"/>



<!-- 
  Energy
-->
  <node name="energy"
	filter="generic-vector-f32-norm"
	value="1"/>
  <link from="amplitude-spectrum" to="energy"/>


  <node name="convert-energy-to-vector"
	filter="generic-convert-f32-to-vector-f32"/>
  <link from="energy" to="convert-energy-to-vector"/>


  <node name="energy-normalization" 
	filter="signal-normalization"
	type="divide-by-mean"
	length="infinite" 
	right="infinite"/>
  <link from="convert-energy-to-vector" to="energy-normalization"/>


  <node name="convert-energy-vector-to-scalar" 
	filter="generic-convert-vector-f32-to-f32"/>
  <link from="energy-normalization" to="convert-energy-vector-to-scalar"/>



<!-- 
  Mfccs (used to synchronize plps and energies)
-->
  <node name="mfcc-preemphasis" 
	filter="signal-preemphasis"
	alpha="1.00"/>
  <link from="network:samples" to="mfcc-preemphasis"/>


  <node name="mfcc-window" 
	filter="signal-window" 
	type="hamming" 
	shift="0.01" 
	length="0.025"/>
  <link from="mfcc-preemphasis" to="mfcc-window"/>


  <node name="mfcc-fast-fourier-transform" 
	filter="signal-real-fast-fourier-transform"
	maximum-input-size="0.025"/>
  <link from="mfcc-window" to="mfcc-fast-fourier-transform"/>


  <node name="mfcc-amplitude-spectrum" 
	filter="signal-vector-alternating-complex-f32-amplitude"/>
  <link from="mfcc-fast-fourier-transform" to="mfcc-amplitude-spectrum"/>


  <node name="mfcc-filterbank" 
	filter="signal-filterbank"
	warping-function="mel" 
	filter-width="268.258"/>
  <link from="mfcc-amplitude-spectrum" to="mfcc-filterbank"/>


  <node name="mfcc-nonlinear" 
	filter="generic-vector-f32-log"/>
  <link from="mfcc-filterbank" to="mfcc-nonlinear"/>


  <node name="mfcc-cepstrum" 
	filter="signal-cosine-transform" 
	nr-outputs="16"/>
  <link from="mfcc-nonlinear" to="mfcc-cepstrum"/>



<!--
  Synchronization with Mfccs
-->
  <node name="plp-synchronization"
	filter="generic-synchronization"/>
  <link from="mfcc-cepstrum" to="plp-synchronization:target"/>
  <link from="plp-normalization" to="plp-synchronization"/>


  <node name="energy-synchronization"
	filter="generic-synchronization"/>
  <link from="mfcc-cepstrum" to="energy-synchronization:target"/>
  <link from="convert-energy-vector-to-scalar" to="energy-synchronization"/>


  <link from="plp-synchronization" to="network:features"/>
  <link from="energy-synchronization" to="network:energies"/>

</network>
